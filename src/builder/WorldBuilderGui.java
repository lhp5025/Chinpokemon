package builder;

import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import world.WorldTile;
import world.Zone;

/**
 * Tool for graphically creating Zone objects
 */
public class WorldBuilderGui extends javax.swing.JFrame {

    public WorldTile chosenTile;
    WorldBuilderPanel worldBuilderPanel;
    public Zone createdZone;

    private int worldSizeX = 128;
    private int worldSizeY = 128;

    WorldTile[][] worldArray;

    public WorldBuilderGui() {
        System.setProperty("sun.java2d.opengl", "True");
        try {
            // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println("WARNING: Lood and feel not set");
        }

        initComponents();
        populateZone();

        worldBuilderPanel = new WorldBuilderPanel(worldArray);

        jScrollPane2.setViewportView(worldBuilderPanel);
        jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
    }
    
    
    
    /**
     * Populates the Zone with grass tiles surrounded a layer of wall tiles
     */
    public void populateZone() {
        worldArray = new WorldTile[worldSizeX][worldSizeY];
        for (int i = 0; i < worldSizeX; i++) {
            for (int j = 0; j < worldSizeY; j++) {
                if (i == 0 || j == 0 || i == worldSizeX - 1 || j == worldSizeY - 1) {
                    worldArray[i][j] = Zone.wall_basic;
                } else {
                    worldArray[i][j] = Zone.grass_1;
                }
            }
        }
    }
    
    public ArrayList<WorldTile> checkZones() {
        ArrayList<WorldTile> listedTiles = new ArrayList<>();
        
        //iterate through all tiles in the world array
        for (int i = 0; i < worldSizeX; i++) {
            for (int j = 0; j < worldSizeY; j++) {
                
                //System.out.println(worldArray[i][j].getBg_image());
                //compare this tile to all the tile types already added
                for(WorldTile tile : listedTiles) {
                    
                    //if that type of tile is already found stop comparing
                    if(worldArray[i][j].getBg_image().equals(tile.getBg_image())) {
                        break;
                    }
                listedTiles.add(worldArray[i][j]);    
                }
            }
        }
        return listedTiles;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        encountersDialog = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        tileTypeList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        ySizeField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tileList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        exportButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        zoneNameField = new javax.swing.JTextField();
        resizeButton = new javax.swing.JButton();
        xSizeField = new javax.swing.JTextField();
        encountersButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        jFileChooser1.setCurrentDirectory(null);

        tileTypeList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(tileTypeList);

        javax.swing.GroupLayout encountersDialogLayout = new javax.swing.GroupLayout(encountersDialog.getContentPane());
        encountersDialog.getContentPane().setLayout(encountersDialogLayout);
        encountersDialogLayout.setHorizontalGroup(
            encountersDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encountersDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(223, Short.MAX_VALUE))
        );
        encountersDialogLayout.setVerticalGroup(
            encountersDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encountersDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ySizeField.setText("32");

        tileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "grass", "sidewalk", "dirt", "dirt_puddle", "water", "wall_basic", "shrub_basic" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        tileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tileListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tileList);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("X");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Y");

        exportButton.setText("Export");
        exportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportButtonMouseClicked(evt);
            }
        });

        importButton.setText("Import");
        importButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importButtonMouseClicked(evt);
            }
        });

        zoneNameField.setText("ZoneName");

        resizeButton.setText("New");
        resizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resizeButtonMouseClicked(evt);
            }
        });

        xSizeField.setText("32");

        encountersButton.setText("Encounters");
        encountersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encountersButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(zoneNameField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(importButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ySizeField))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(xSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(encountersButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoneNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(encountersButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resizeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(xSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ySizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setWheelScrollingEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 878, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 722, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Changes which WorldTile will be placed
     */
    private void tileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tileListValueChanged
        switch (tileList.getSelectedIndex()) {
            case 0:
                // RNG
                worldBuilderPanel.setCurrentTile(createdZone.grass_1);
                //worldBuilderPanel.setCurrentTile(Zone.grass_3);
                //worldBuilderPanel.setCurrentTile(Zone.grass_2);
                break;
            case 1:
                worldBuilderPanel.setCurrentTile(createdZone.sidewalk);
                break;
            case 2:
                worldBuilderPanel.setCurrentTile(createdZone.dirt);
                break;
            case 3:
                worldBuilderPanel.setCurrentTile(createdZone.dirt_puddle);
                break;
            case 4:
                worldBuilderPanel.setCurrentTile(createdZone.water);
                break;
            case 5:
                worldBuilderPanel.setCurrentTile(createdZone.wall_basic);
                break;
            case 6:
                worldBuilderPanel.setCurrentTile(createdZone.shrub_basic);
                break;
        }
    }//GEN-LAST:event_tileListValueChanged

    /**
     * Serializes Zone object and places file in project directory
     */
    private void exportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportButtonMouseClicked
        createdZone = new Zone(zoneNameField.getText(), worldArray);
        try {
            FileOutputStream fileOut = new FileOutputStream(zoneNameField.getText() + ".zone");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(createdZone);
            out.close();
            fileOut.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportButtonMouseClicked

    private void importButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importButtonMouseClicked
        jFileChooser1.showOpenDialog(jPanel1);
        File file = jFileChooser1.getSelectedFile();
        if (file != null) {
            try {
                FileInputStream fileIn = new FileInputStream(file);
                ObjectInputStream in = new ObjectInputStream(fileIn);
                createdZone = (Zone) in.readObject();
                zoneNameField.setText(createdZone.name);
                worldBuilderPanel.worldArray = createdZone.getZone_tiles();
                worldBuilderPanel.repaint();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_importButtonMouseClicked

    private void resizeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resizeButtonMouseClicked
        try {
            worldSizeX = Integer.parseInt(xSizeField.getText());
            worldSizeY = Integer.parseInt(ySizeField.getText());
            
            populateZone();
            worldBuilderPanel = new WorldBuilderPanel(worldArray);
            jScrollPane2.setViewportView(worldBuilderPanel);
            worldBuilderPanel.repaint();
            
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_resizeButtonMouseClicked

    private void encountersButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encountersButtonMouseClicked
        
        encountersDialog.setVisible(true);
        ArrayList<WorldTile> listedTiles = checkZones();
        DefaultListModel model = new DefaultListModel();
        for(WorldTile tile: listedTiles) {
            model.addElement(tile);
        }
        tileTypeList.setModel(model);
        
    }//GEN-LAST:event_encountersButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorldBuilderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorldBuilderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorldBuilderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorldBuilderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WorldBuilderGui().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton encountersButton;
    private javax.swing.JDialog encountersDialog;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton importButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton resizeButton;
    private javax.swing.JList<String> tileList;
    private javax.swing.JList<String> tileTypeList;
    private javax.swing.JTextField xSizeField;
    private javax.swing.JTextField ySizeField;
    private javax.swing.JTextField zoneNameField;
    // End of variables declaration//GEN-END:variables
}
